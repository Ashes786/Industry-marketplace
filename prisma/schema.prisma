// This is your Prisma schema file for B2B Industrial Marketplace Pakistan
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum UserRole {
  BUYER
  SELLER
  BOTH
  ADMIN
}

enum SubscriptionPlan {
  BASIC
  STANDARD
  PREMIUM
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
}

enum RFQStatus {
  OPEN
  NEGOTIATION
  APPROVED
  CLOSED
}

enum TransactionStatus {
  PENDING
  PAID
  COMPLETED
  FAILED
}

enum PlanType {
  BASIC
  STANDARD
  PREMIUM
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  phone        String?
  name         String
  passwordHash String
  roles        UserRole
  companyName  String?
  address      String?
  city         String?
  country      String   @default("Pakistan")
  isApproved   Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  subscriptions     Subscription[]
  products          Product[]
  rfqs              RFQ[]
  sentChats         Chat[] @relation("SentChats")
  receivedChats     Chat[] @relation("ReceivedChats")
  buyerTransactions Transaction[] @relation("BuyerTransactions")
  sellerTransactions Transaction[] @relation("SellerTransactions")
  extraListings     ExtraListing[]
  adminLogs         AdminLog[]

  @@map("users")
}

model AvailablePlan {
  id          String           @id @default(cuid())
  name        String
  description String?
  price       Float
  duration    Int              // in days
  features    String           // JSON array of features
  isActive    Boolean          @default(true)
  isTrial     Boolean          @default(false)
  trialDays   Int?             // number of trial days if applicable
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relations
  subscriptions Subscription[]

  @@map("available_plans")
}

model Subscription {
  id          String            @id @default(cuid())
  userId      String
  planId      String?
  planType    SubscriptionPlan
  startDate   DateTime
  endDate     DateTime
  status      SubscriptionStatus @default(ACTIVE)
  amount      Float
  isTrial     Boolean          @default(false)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan AvailablePlan? @relation(fields: [planId], references: [id])

  @@map("subscriptions")
}

model Product {
  id             String   @id @default(cuid())
  sellerId       String
  title          String
  description    String
  price          Float
  quantity       Int
  unit           String   @default("piece")
  category       String
  subCategory    String?
  images         String? // JSON array of image URLs
  isActive       Boolean  @default(true)
  isFeatured     Boolean  @default(false)
  views          Int      @default(0)
  planListingId  String?  // For tracking which subscription this listing belongs to
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  seller        User         @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  transactions   Transaction[]
  rfqProducts    RFQProduct[]

  @@map("products")
}

model RFQ {
  id          String    @id @default(cuid())
  buyerId     String
  title       String
  description String
  category    String
  budget      Float?
  quantity    Int
  unit        String    @default("piece")
  deadline    DateTime?
  status      RFQStatus @default(OPEN)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  buyer       User         @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  chats       Chat[]
  products    RFQProduct[]
  transactions Transaction[]

  @@map("rfqs")
}

model RFQProduct {
  id       String @id @default(cuid())
  rfqId    String
  productId String
  quantity Int
  unit     String @default("piece")
  notes    String?

  // Relations
  rfq    RFQ     @relation(fields: [rfqId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([rfqId, productId])
  @@map("rfq_products")
}

model Chat {
  id           String   @id @default(cuid())
  rfqId        String
  senderId     String
  receiverId   String
  message      String
  attachments  String? // JSON array of file URLs
  messageType  String   @default("text") // text, image, pdf, etc.
  timestamp    DateTime @default(now())
  isRead       Boolean  @default(false)

  // Relations
  rfq      RFQ  @relation(fields: [rfqId], references: [id], onDelete: Cascade)
  sender   User @relation("SentChats", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("ReceivedChats", fields: [receiverId], references: [id], onDelete: Cascade)

  @@map("chats")
}

model Transaction {
  id              String           @id @default(cuid())
  rfqId           String?
  productId       String?
  buyerId         String
  sellerId        String
  totalAmount     Float
  commissionAmount Float
  productAmount   Float
  status          TransactionStatus @default(PENDING)
  paymentDate     DateTime?
  invoiceNumber   String?
  invoicePdf      String?
  notes           String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  // Relations
  buyer    User     @relation("BuyerTransactions", fields: [buyerId], references: [id], onDelete: Cascade)
  seller   User     @relation("SellerTransactions", fields: [sellerId], references: [id], onDelete: Cascade)
  rfq      RFQ?     @relation(fields: [rfqId], references: [id], onDelete: Cascade)
  product  Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  invoice  Invoice?

  @@map("transactions")
}

model Invoice {
  id            String   @id @default(cuid())
  transactionId String   @unique
  invoiceNumber String   @unique
  pdfUrl        String?
  createdAt     DateTime @default(now())

  // Relations
  transaction Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  @@map("invoices")
}

model ExtraListing {
  id           String   @id @default(cuid())
  sellerId     String
  listingCount Int
  amount       Float
  status       String   @default("active") // active, used, expired
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  seller User @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  @@map("extra_listings")
}

model AdminLog {
  id           String   @id @default(cuid())
  adminId      String
  action       String
  targetUserId String?
  details      String?
  timestamp    DateTime @default(now())

  // Relations
  admin User @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@map("admin_logs")
}